# ======== SUMMARY  ======== #
#[MODE];
#post_merge (bool)[0,1]:
#0 = for each csv file generate a dataset .feather;
#1 = merge all csv results into a single .feather dataset;
#
#
#[FILE];
#name (string):  desired name to file. Extesions attributed by hardcode;
#sheet(string): its case sensitive, but accepts number or name (case sensitive), default its index 0 (first sheet). Obrigatory to single sheet;
#name_sheet (list[str]): doesn't work with sheet_single = 1. If a sheet contains the specified terms it will be readed;
#log_name: (string), desired name to file that log errors;
#
#
#[HEADER];
#row: (bool)[0,1], default its index 0 (first row);
#adjust_model: (list), separated list of elements to adjust column name based each index 0 name. First element denote the defaultname. Comma separate elements of same column and semicolon different collumns;
#
#
#[COLUMN];
#skip (int): skip blanks columns in excel to start correctly the dataframe;
#not_null (list[str]): list of columns that must be filled, pass the combination of columns that make registry valid, if one of the columns is null the registry will be dropped;
#drop (list[str]): columns name do drop;
#drop_number (bool)[0,1]: drop columns named just with number, for example duplicate empty column in excel matrixes;
#stop_first_blank (bool)[0,1]: when 1 stop reading columns to dataframe at first blank column ocorrence;
#add_file_control (bool)[0,1]: when 1 add filename and sheet name columns to final databasefile (feather);
#drop_thresh_blank (int): remove row if filled colums match with value specified. drop_thresh_blank_registry = 2 remove row if has just 2  or less columns filled with data;
#until_first_blank (bool)[0,1]:, stop reading collumns if an empty column is finded;
#
#
#[ROW];
#stop_first_blank: (bool)[0,1], stop reading rows if an empty column is finded;
#drop_thresh_blank: (bool), if empty rows dont hit that limit row are removed;
#drop_duplicate: (bool)[0,1], 
#
#
#[PATH];
#fileIn (string): folder that file is in;
#fileout (string): file's destination folder;
#
#
#[DEBUG];
#on: (int)[0,1], show scripts steps while running;
#logtime: (int)[0,1], exhibit the expended time to each step;
#
#[CONFIG];
#on: (bool): when 1 export used "config.ini" file;
#header (bool): when 1 export this documentation summary in generated "config.ini" file;
#path_out (str): configuration's file destination folder;
#
# ======== CONFIGURATIONS ======== #
[MODE]
post_merge = 1


[FILE]
name = 
name_sheet = 
log_name = 


[HEADER]
start_row = 0
adjust_model = 

[COLUMN]
skip = 0
not_null = 
drop =
drop_number = 
stop_first_blank = 1
add_file_control = 1

[ROW]
stop_first_blank = 0
drop_thresh_blank = 5
drop_duplicate = 1

[PATH]
fileIn = C:\Users\custom\Desktop\Data\Area
fileOut = C:\Users\custom\Desktop\Output\Area

[DEBUG]
on =
logtime =

[CONFIG]
name = 
summary =
commentary = 
path_out = C:\Users\custom\Desktop\Output\Area\etl_config
